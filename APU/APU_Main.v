// File: APU_Main.v
// Generated by MyHDL 0.7
// Date: Sun May 19 20:23:24 2013


`timescale 1ns/10ps

module APU_Main (
    CLK,
    RSTN,
    PHI2_CE,
    RW10,
    Address,
    Data_read,
    Data_write,
    Interrupt,
    PCM_out
);


input CLK;
input RSTN;
input PHI2_CE;
input RW10;
input [15:0] Address;
input [7:0] Data_read;
input [7:0] Data_write;
input Interrupt;
output [7:0] PCM_out;
wire [7:0] PCM_out;

wire Triangle_CS;
wire Pulse2_CS;
reg APU_CE_cnt;
reg [3:0] PCM_triangle;
wire Noise_CS;
reg HalfFrame_CE;
wire Pulse1_CS;
reg QuarterFrame_CE;
wire APU_CE;
reg [3:0] PCM_pulse1;
reg [3:0] PCM_pulse2;
reg [3:0] PCM_noise;
reg [6:0] triangle_linearCounter;
reg [6:0] triangle_linearCounterLoad;
reg [10:0] triangle_TimerLoad;
wire triangle_LengthCounterGate;
reg [10:0] triangle_timer;
reg triangle_LengthCounterHalt;
reg [4:0] triangle_sequencer;
reg triangle_LengthCounterLoadFlag;
reg [4:0] triangle_LengthCounterLoad;
reg [7:0] triangle_lengthCounter_LengthCounter;
reg [3:0] noise_EnvelopeDecay;
reg [14:0] noise_lfsr;
wire noise_LengthCounterGate;
reg [3:0] noise_EnvelopeVolume;
reg [3:0] noise_TimerLoad;
reg noise_LengthCounterHalt;
reg noise_EnvelopeStartFlag;
reg noise_LFSRMode;
reg [11:0] noise_timer;
reg [4:0] noise_LengthCounterLoad;
reg noise_LengthCounterLoadFlag;
reg noise_EnvelopeConstantFlag;
reg [3:0] noise_envelope_volume;
wire noise_envelope_LoopFlag;
reg [3:0] noise_envelope_divider;
reg [7:0] noise_lengthCounter_LengthCounter;
reg [3:0] pulse2_EnvelopeDecay;
wire pulse2_LengthCounterGate;
reg [7:0] pulse2_sequencer;
reg [1:0] pulse2_DutyCycle;
reg [3:0] pulse2_EnvelopeVolume;
reg [10:0] pulse2_TimerLoad;
wire pulse2_LengthCounterHalt;
reg pulse2_EnvelopeStartFlag;
reg [10:0] pulse2_timer;
reg [4:0] pulse2_LengthCounterLoad;
reg pulse2_LengthCounterLoadFlag;
reg pulse2_EnvelopeConstantFlag;
reg [3:0] pulse2_envelope_volume;
wire pulse2_envelope_LoopFlag;
reg [3:0] pulse2_envelope_divider;
reg [7:0] pulse2_lengthCounter_LengthCounter;
reg [3:0] pulse1_EnvelopeDecay;
wire pulse1_LengthCounterGate;
reg [7:0] pulse1_sequencer;
reg [1:0] pulse1_DutyCycle;
reg [3:0] pulse1_EnvelopeVolume;
reg [10:0] pulse1_TimerLoad;
wire pulse1_LengthCounterHalt;
reg pulse1_EnvelopeStartFlag;
reg [10:0] pulse1_timer;
reg [4:0] pulse1_LengthCounterLoad;
reg pulse1_LengthCounterLoadFlag;
reg pulse1_EnvelopeConstantFlag;
reg [3:0] pulse1_envelope_volume;
wire pulse1_envelope_LoopFlag;
reg [3:0] pulse1_envelope_divider;
reg [7:0] pulse1_lengthCounter_LengthCounter;
reg frameCounter_InterruptInhibit;
reg [14:0] frameCounter_timer;
reg frameCounter_Mode;


assign noise_envelope_LoopFlag = 0;
assign pulse2_LengthCounterHalt = 0;
assign pulse2_envelope_LoopFlag = 0;
assign pulse1_LengthCounterHalt = 0;
assign pulse1_envelope_LoopFlag = 0;




assign Pulse1_CS = ((16384 <= Address) && (Address < 16388));
assign Pulse2_CS = ((16388 <= Address) && (Address < 16392));
assign Triangle_CS = ((16392 <= Address) && (Address < 16396));
assign Noise_CS = ((16396 <= Address) && (Address < 16400));
assign APU_CE = (PHI2_CE && APU_CE_cnt);
assign PCM_out = (((PCM_pulse1 + PCM_pulse2) + PCM_noise) + PCM_triangle);


always @(posedge CLK) begin: APU_MAIN_CE
    if (PHI2_CE) begin
        APU_CE_cnt <= (!APU_CE_cnt);
    end
end


always @(posedge CLK) begin: APU_MAIN_FRAMECOUNTER_LOGIC
    if ((PHI2_CE && (!RW10) && (Address == 16407))) begin
        frameCounter_Mode <= Data_write[7];
        frameCounter_InterruptInhibit <= Data_write[6];
    end
    QuarterFrame_CE <= 1'b0;
    HalfFrame_CE <= 1'b0;
    if (APU_CE) begin
        frameCounter_timer <= (frameCounter_timer + 1);
        if ((frameCounter_timer == 3728)) begin
            QuarterFrame_CE <= 1'b1;
        end
        else if ((frameCounter_timer == 7456)) begin
            HalfFrame_CE <= 1'b1;
            QuarterFrame_CE <= 1'b1;
        end
        else if ((frameCounter_timer == 11186)) begin
            QuarterFrame_CE <= 1'b1;
        end
        else if (((!frameCounter_Mode) && (frameCounter_timer == 14914))) begin
            HalfFrame_CE <= 1'b1;
            QuarterFrame_CE <= 1'b1;
            frameCounter_timer <= 0;
        end
        else if ((frameCounter_Mode && (frameCounter_timer == 18640))) begin
            HalfFrame_CE <= 1'b1;
            QuarterFrame_CE <= 1'b1;
            frameCounter_timer <= 0;
        end
    end
end


always @(posedge CLK) begin: APU_MAIN_NOISE_LOGIC
    reg fb_bit;
    if ((!RSTN)) begin
        noise_lfsr <= 15'b111111111111111;
    end
    else begin
        if (QuarterFrame_CE) begin
            noise_EnvelopeStartFlag <= 1'b0;
        end
        noise_LengthCounterLoadFlag <= 1'b0;
        if ((PHI2_CE && (RW10 == 0) && Noise_CS)) begin
            if ((Address[2-1:0] == 0)) begin
                noise_LengthCounterHalt <= Data_write[5];
                noise_EnvelopeConstantFlag <= Data_write[4];
                noise_EnvelopeDecay <= Data_write[4-1:0];
            end
            else if ((Address[2-1:0] == 2)) begin
                noise_LFSRMode <= Data_write[7];
                noise_TimerLoad[4-1:0] <= Data_write[4-1:0];
            end
            else if ((Address[2-1:0] == 3)) begin
                noise_EnvelopeStartFlag <= 1'b1;
                noise_LengthCounterLoad <= Data_write[8-1:3];
                noise_LengthCounterLoadFlag <= 1'b1;
            end
        end
        if (APU_CE) begin
            if ((noise_timer == 0)) begin
                fb_bit = (noise_lfsr[1] != 0);
                if (noise_LFSRMode) begin
                    fb_bit = noise_lfsr[6];
                end
                noise_lfsr <= {(fb_bit ^ noise_lfsr[0]), noise_lfsr[15-1:1]};
                PCM_noise <= (noise_lfsr[0] && noise_LengthCounterGate) ? noise_EnvelopeVolume : 0;
                case (noise_TimerLoad)
                    0: noise_timer <= 4;
                    1: noise_timer <= 8;
                    2: noise_timer <= 16;
                    3: noise_timer <= 32;
                    4: noise_timer <= 64;
                    5: noise_timer <= 96;
                    6: noise_timer <= 128;
                    7: noise_timer <= 160;
                    8: noise_timer <= 202;
                    9: noise_timer <= 254;
                    10: noise_timer <= 380;
                    11: noise_timer <= 508;
                    12: noise_timer <= 762;
                    13: noise_timer <= 1016;
                    14: noise_timer <= 2034;
                    default: noise_timer <= 4068;
                endcase
            end
            else begin
                noise_timer <= (noise_timer - 1);
            end
        end
    end
end


always @(noise_envelope_volume, noise_EnvelopeDecay, noise_EnvelopeConstantFlag) begin: APU_MAIN_NOISE_ENVELOPE_COMB
    if (noise_EnvelopeConstantFlag) begin
        noise_EnvelopeVolume = noise_EnvelopeDecay;
    end
    else begin
        noise_EnvelopeVolume = noise_envelope_volume;
    end
end


always @(posedge CLK) begin: APU_MAIN_NOISE_ENVELOPE_LOGIC
    if (QuarterFrame_CE) begin
        if (noise_EnvelopeStartFlag) begin
            noise_envelope_volume <= 15;
            noise_envelope_divider <= noise_EnvelopeDecay;
        end
        else begin
            if ((noise_envelope_divider == 0)) begin
                noise_envelope_divider <= noise_EnvelopeDecay;
                if ((noise_envelope_volume != 0)) begin
                    noise_envelope_volume <= (noise_envelope_volume - 1);
                end
                else begin
                    if (noise_envelope_LoopFlag) begin
                        noise_envelope_volume <= 15;
                    end
                end
            end
            else begin
                noise_envelope_divider <= (noise_envelope_divider - 1);
            end
        end
    end
end


always @(posedge CLK) begin: APU_MAIN_NOISE_LENGTHCOUNTER_LOGIC
    if (HalfFrame_CE) begin
        if (((noise_lengthCounter_LengthCounter > 0) && (!noise_LengthCounterHalt))) begin
            noise_lengthCounter_LengthCounter <= (noise_lengthCounter_LengthCounter - 1);
        end
    end
    if (noise_LengthCounterLoadFlag) begin
        case (noise_LengthCounterLoad)
            0: noise_lengthCounter_LengthCounter <= 10;
            1: noise_lengthCounter_LengthCounter <= 254;
            2: noise_lengthCounter_LengthCounter <= 20;
            3: noise_lengthCounter_LengthCounter <= 2;
            4: noise_lengthCounter_LengthCounter <= 40;
            5: noise_lengthCounter_LengthCounter <= 4;
            6: noise_lengthCounter_LengthCounter <= 80;
            7: noise_lengthCounter_LengthCounter <= 6;
            8: noise_lengthCounter_LengthCounter <= 160;
            9: noise_lengthCounter_LengthCounter <= 8;
            10: noise_lengthCounter_LengthCounter <= 60;
            11: noise_lengthCounter_LengthCounter <= 10;
            12: noise_lengthCounter_LengthCounter <= 14;
            13: noise_lengthCounter_LengthCounter <= 12;
            14: noise_lengthCounter_LengthCounter <= 26;
            15: noise_lengthCounter_LengthCounter <= 14;
            16: noise_lengthCounter_LengthCounter <= 12;
            17: noise_lengthCounter_LengthCounter <= 16;
            18: noise_lengthCounter_LengthCounter <= 24;
            19: noise_lengthCounter_LengthCounter <= 18;
            20: noise_lengthCounter_LengthCounter <= 48;
            21: noise_lengthCounter_LengthCounter <= 20;
            22: noise_lengthCounter_LengthCounter <= 96;
            23: noise_lengthCounter_LengthCounter <= 22;
            24: noise_lengthCounter_LengthCounter <= 192;
            25: noise_lengthCounter_LengthCounter <= 24;
            26: noise_lengthCounter_LengthCounter <= 72;
            27: noise_lengthCounter_LengthCounter <= 26;
            28: noise_lengthCounter_LengthCounter <= 16;
            29: noise_lengthCounter_LengthCounter <= 28;
            30: noise_lengthCounter_LengthCounter <= 32;
            default: noise_lengthCounter_LengthCounter <= 30;
        endcase
    end
end



assign noise_LengthCounterGate = (noise_lengthCounter_LengthCounter > 0);


always @(posedge CLK) begin: APU_MAIN_TRIANGLE_LOGIC
    if (QuarterFrame_CE) begin
        if (triangle_LengthCounterHalt) begin
            triangle_linearCounter <= triangle_linearCounterLoad;
        end
        else if ((triangle_linearCounter > 0)) begin
            triangle_linearCounter <= (triangle_linearCounter - 1);
        end
    end
    triangle_LengthCounterLoadFlag <= 1'b0;
    if ((PHI2_CE && (RW10 == 0) && Triangle_CS)) begin
        if ((Address[2-1:0] == 0)) begin
            triangle_LengthCounterHalt <= Data_write[7];
            triangle_linearCounterLoad <= Data_write[7-1:0];
        end
        else if ((Address[2-1:0] == 2)) begin
            triangle_TimerLoad[8-1:0] <= Data_write;
        end
        else if ((Address[2-1:0] == 3)) begin
            triangle_TimerLoad[11-1:8] <= Data_write[3-1:0];
            triangle_LengthCounterLoad <= Data_write[8-1:3];
            triangle_LengthCounterLoadFlag <= 1'b1;
        end
    end
    if (APU_CE) begin
        if ((triangle_timer == 0)) begin
            triangle_sequencer <= ((triangle_sequencer + 1) % 32);
            if ((triangle_LengthCounterGate && (triangle_linearCounter > 0))) begin
                case (triangle_sequencer)
                    0: PCM_triangle <= 15;
                    1: PCM_triangle <= 14;
                    2: PCM_triangle <= 13;
                    3: PCM_triangle <= 12;
                    4: PCM_triangle <= 11;
                    5: PCM_triangle <= 10;
                    6: PCM_triangle <= 9;
                    7: PCM_triangle <= 8;
                    8: PCM_triangle <= 7;
                    9: PCM_triangle <= 6;
                    10: PCM_triangle <= 5;
                    11: PCM_triangle <= 4;
                    12: PCM_triangle <= 3;
                    13: PCM_triangle <= 2;
                    14: PCM_triangle <= 1;
                    15: PCM_triangle <= 0;
                    16: PCM_triangle <= 0;
                    17: PCM_triangle <= 1;
                    18: PCM_triangle <= 2;
                    19: PCM_triangle <= 3;
                    20: PCM_triangle <= 4;
                    21: PCM_triangle <= 5;
                    22: PCM_triangle <= 6;
                    23: PCM_triangle <= 7;
                    24: PCM_triangle <= 8;
                    25: PCM_triangle <= 9;
                    26: PCM_triangle <= 10;
                    27: PCM_triangle <= 11;
                    28: PCM_triangle <= 12;
                    29: PCM_triangle <= 13;
                    30: PCM_triangle <= 14;
                    default: PCM_triangle <= 15;
                endcase
            end
            else begin
                PCM_triangle <= 0;
            end
            triangle_timer <= triangle_TimerLoad;
        end
        else begin
            triangle_timer <= (triangle_timer - 1);
        end
    end
end


always @(posedge CLK) begin: APU_MAIN_TRIANGLE_LENGTHCOUNTER_LOGIC
    if (HalfFrame_CE) begin
        if (((triangle_lengthCounter_LengthCounter > 0) && (!triangle_LengthCounterHalt))) begin
            triangle_lengthCounter_LengthCounter <= (triangle_lengthCounter_LengthCounter - 1);
        end
    end
    if (triangle_LengthCounterLoadFlag) begin
        case (triangle_LengthCounterLoad)
            0: triangle_lengthCounter_LengthCounter <= 10;
            1: triangle_lengthCounter_LengthCounter <= 254;
            2: triangle_lengthCounter_LengthCounter <= 20;
            3: triangle_lengthCounter_LengthCounter <= 2;
            4: triangle_lengthCounter_LengthCounter <= 40;
            5: triangle_lengthCounter_LengthCounter <= 4;
            6: triangle_lengthCounter_LengthCounter <= 80;
            7: triangle_lengthCounter_LengthCounter <= 6;
            8: triangle_lengthCounter_LengthCounter <= 160;
            9: triangle_lengthCounter_LengthCounter <= 8;
            10: triangle_lengthCounter_LengthCounter <= 60;
            11: triangle_lengthCounter_LengthCounter <= 10;
            12: triangle_lengthCounter_LengthCounter <= 14;
            13: triangle_lengthCounter_LengthCounter <= 12;
            14: triangle_lengthCounter_LengthCounter <= 26;
            15: triangle_lengthCounter_LengthCounter <= 14;
            16: triangle_lengthCounter_LengthCounter <= 12;
            17: triangle_lengthCounter_LengthCounter <= 16;
            18: triangle_lengthCounter_LengthCounter <= 24;
            19: triangle_lengthCounter_LengthCounter <= 18;
            20: triangle_lengthCounter_LengthCounter <= 48;
            21: triangle_lengthCounter_LengthCounter <= 20;
            22: triangle_lengthCounter_LengthCounter <= 96;
            23: triangle_lengthCounter_LengthCounter <= 22;
            24: triangle_lengthCounter_LengthCounter <= 192;
            25: triangle_lengthCounter_LengthCounter <= 24;
            26: triangle_lengthCounter_LengthCounter <= 72;
            27: triangle_lengthCounter_LengthCounter <= 26;
            28: triangle_lengthCounter_LengthCounter <= 16;
            29: triangle_lengthCounter_LengthCounter <= 28;
            30: triangle_lengthCounter_LengthCounter <= 32;
            default: triangle_lengthCounter_LengthCounter <= 30;
        endcase
    end
end



assign triangle_LengthCounterGate = (triangle_lengthCounter_LengthCounter > 0);


always @(posedge CLK) begin: APU_MAIN_PULSE2_LOGIC
    if ((!RSTN)) begin
        pulse2_sequencer <= 8'b00001111;
    end
    else begin
        if (QuarterFrame_CE) begin
            pulse2_EnvelopeStartFlag <= 1'b0;
        end
        pulse2_LengthCounterLoadFlag <= 1'b0;
        if (APU_CE) begin
            if ((pulse2_timer == 0)) begin
                pulse2_sequencer <= {pulse2_sequencer[0], pulse2_sequencer[8-1:1]};
                PCM_pulse2 <= pulse2_sequencer[0] ? pulse2_EnvelopeVolume : 0;
                if ((!pulse2_LengthCounterGate)) begin
                    PCM_pulse2 <= 0;
                end
                pulse2_timer <= pulse2_TimerLoad;
            end
            else begin
                pulse2_timer <= (pulse2_timer - 1);
            end
        end
        if ((PHI2_CE && (RW10 == 0) && Pulse2_CS)) begin
            if ((Address[2-1:0] == 0)) begin
                pulse2_DutyCycle <= Data_write[8-1:6];
                pulse2_EnvelopeConstantFlag <= Data_write[4];
                pulse2_EnvelopeDecay <= Data_write[4-1:0];
            end
            else if ((Address[2-1:0] == 1)) begin
                // pass
            end
            else if ((Address[2-1:0] == 2)) begin
                pulse2_TimerLoad[8-1:0] <= Data_write;
            end
            else if ((Address[2-1:0] == 3)) begin
                pulse2_EnvelopeStartFlag <= 1'b1;
                pulse2_TimerLoad[11-1:8] <= Data_write[3-1:0];
                pulse2_LengthCounterLoad <= Data_write[8-1:3];
            end
            pulse2_LengthCounterLoadFlag <= 1'b1;
        end
    end
end


always @(pulse2_envelope_volume, pulse2_EnvelopeDecay, pulse2_EnvelopeConstantFlag) begin: APU_MAIN_PULSE2_ENVELOPE_COMB
    if (pulse2_EnvelopeConstantFlag) begin
        pulse2_EnvelopeVolume = pulse2_EnvelopeDecay;
    end
    else begin
        pulse2_EnvelopeVolume = pulse2_envelope_volume;
    end
end


always @(posedge CLK) begin: APU_MAIN_PULSE2_ENVELOPE_LOGIC
    if (QuarterFrame_CE) begin
        if (pulse2_EnvelopeStartFlag) begin
            pulse2_envelope_volume <= 15;
            pulse2_envelope_divider <= pulse2_EnvelopeDecay;
        end
        else begin
            if ((pulse2_envelope_divider == 0)) begin
                pulse2_envelope_divider <= pulse2_EnvelopeDecay;
                if ((pulse2_envelope_volume != 0)) begin
                    pulse2_envelope_volume <= (pulse2_envelope_volume - 1);
                end
                else begin
                    if (pulse2_envelope_LoopFlag) begin
                        pulse2_envelope_volume <= 15;
                    end
                end
            end
            else begin
                pulse2_envelope_divider <= (pulse2_envelope_divider - 1);
            end
        end
    end
end


always @(posedge CLK) begin: APU_MAIN_PULSE2_LENGTHCOUNTER_LOGIC
    if (HalfFrame_CE) begin
        if (((pulse2_lengthCounter_LengthCounter > 0) && (!pulse2_LengthCounterHalt))) begin
            pulse2_lengthCounter_LengthCounter <= (pulse2_lengthCounter_LengthCounter - 1);
        end
    end
    if (pulse2_LengthCounterLoadFlag) begin
        case (pulse2_LengthCounterLoad)
            0: pulse2_lengthCounter_LengthCounter <= 10;
            1: pulse2_lengthCounter_LengthCounter <= 254;
            2: pulse2_lengthCounter_LengthCounter <= 20;
            3: pulse2_lengthCounter_LengthCounter <= 2;
            4: pulse2_lengthCounter_LengthCounter <= 40;
            5: pulse2_lengthCounter_LengthCounter <= 4;
            6: pulse2_lengthCounter_LengthCounter <= 80;
            7: pulse2_lengthCounter_LengthCounter <= 6;
            8: pulse2_lengthCounter_LengthCounter <= 160;
            9: pulse2_lengthCounter_LengthCounter <= 8;
            10: pulse2_lengthCounter_LengthCounter <= 60;
            11: pulse2_lengthCounter_LengthCounter <= 10;
            12: pulse2_lengthCounter_LengthCounter <= 14;
            13: pulse2_lengthCounter_LengthCounter <= 12;
            14: pulse2_lengthCounter_LengthCounter <= 26;
            15: pulse2_lengthCounter_LengthCounter <= 14;
            16: pulse2_lengthCounter_LengthCounter <= 12;
            17: pulse2_lengthCounter_LengthCounter <= 16;
            18: pulse2_lengthCounter_LengthCounter <= 24;
            19: pulse2_lengthCounter_LengthCounter <= 18;
            20: pulse2_lengthCounter_LengthCounter <= 48;
            21: pulse2_lengthCounter_LengthCounter <= 20;
            22: pulse2_lengthCounter_LengthCounter <= 96;
            23: pulse2_lengthCounter_LengthCounter <= 22;
            24: pulse2_lengthCounter_LengthCounter <= 192;
            25: pulse2_lengthCounter_LengthCounter <= 24;
            26: pulse2_lengthCounter_LengthCounter <= 72;
            27: pulse2_lengthCounter_LengthCounter <= 26;
            28: pulse2_lengthCounter_LengthCounter <= 16;
            29: pulse2_lengthCounter_LengthCounter <= 28;
            30: pulse2_lengthCounter_LengthCounter <= 32;
            default: pulse2_lengthCounter_LengthCounter <= 30;
        endcase
    end
end



assign pulse2_LengthCounterGate = (pulse2_lengthCounter_LengthCounter > 0);


always @(posedge CLK) begin: APU_MAIN_PULSE1_LOGIC
    if ((!RSTN)) begin
        pulse1_sequencer <= 8'b00001111;
    end
    else begin
        if (QuarterFrame_CE) begin
            pulse1_EnvelopeStartFlag <= 1'b0;
        end
        pulse1_LengthCounterLoadFlag <= 1'b0;
        if (APU_CE) begin
            if ((pulse1_timer == 0)) begin
                pulse1_sequencer <= {pulse1_sequencer[0], pulse1_sequencer[8-1:1]};
                PCM_pulse1 <= pulse1_sequencer[0] ? pulse1_EnvelopeVolume : 0;
                if ((!pulse1_LengthCounterGate)) begin
                    PCM_pulse1 <= 0;
                end
                pulse1_timer <= pulse1_TimerLoad;
            end
            else begin
                pulse1_timer <= (pulse1_timer - 1);
            end
        end
        if ((PHI2_CE && (RW10 == 0) && Pulse1_CS)) begin
            if ((Address[2-1:0] == 0)) begin
                pulse1_DutyCycle <= Data_write[8-1:6];
                pulse1_EnvelopeConstantFlag <= Data_write[4];
                pulse1_EnvelopeDecay <= Data_write[4-1:0];
            end
            else if ((Address[2-1:0] == 1)) begin
                // pass
            end
            else if ((Address[2-1:0] == 2)) begin
                pulse1_TimerLoad[8-1:0] <= Data_write;
            end
            else if ((Address[2-1:0] == 3)) begin
                pulse1_EnvelopeStartFlag <= 1'b1;
                pulse1_TimerLoad[11-1:8] <= Data_write[3-1:0];
                pulse1_LengthCounterLoad <= Data_write[8-1:3];
            end
            pulse1_LengthCounterLoadFlag <= 1'b1;
        end
    end
end


always @(pulse1_envelope_volume, pulse1_EnvelopeDecay, pulse1_EnvelopeConstantFlag) begin: APU_MAIN_PULSE1_ENVELOPE_COMB
    if (pulse1_EnvelopeConstantFlag) begin
        pulse1_EnvelopeVolume = pulse1_EnvelopeDecay;
    end
    else begin
        pulse1_EnvelopeVolume = pulse1_envelope_volume;
    end
end


always @(posedge CLK) begin: APU_MAIN_PULSE1_ENVELOPE_LOGIC
    if (QuarterFrame_CE) begin
        if (pulse1_EnvelopeStartFlag) begin
            pulse1_envelope_volume <= 15;
            pulse1_envelope_divider <= pulse1_EnvelopeDecay;
        end
        else begin
            if ((pulse1_envelope_divider == 0)) begin
                pulse1_envelope_divider <= pulse1_EnvelopeDecay;
                if ((pulse1_envelope_volume != 0)) begin
                    pulse1_envelope_volume <= (pulse1_envelope_volume - 1);
                end
                else begin
                    if (pulse1_envelope_LoopFlag) begin
                        pulse1_envelope_volume <= 15;
                    end
                end
            end
            else begin
                pulse1_envelope_divider <= (pulse1_envelope_divider - 1);
            end
        end
    end
end


always @(posedge CLK) begin: APU_MAIN_PULSE1_LENGTHCOUNTER_LOGIC
    if (HalfFrame_CE) begin
        if (((pulse1_lengthCounter_LengthCounter > 0) && (!pulse1_LengthCounterHalt))) begin
            pulse1_lengthCounter_LengthCounter <= (pulse1_lengthCounter_LengthCounter - 1);
        end
    end
    if (pulse1_LengthCounterLoadFlag) begin
        case (pulse1_LengthCounterLoad)
            0: pulse1_lengthCounter_LengthCounter <= 10;
            1: pulse1_lengthCounter_LengthCounter <= 254;
            2: pulse1_lengthCounter_LengthCounter <= 20;
            3: pulse1_lengthCounter_LengthCounter <= 2;
            4: pulse1_lengthCounter_LengthCounter <= 40;
            5: pulse1_lengthCounter_LengthCounter <= 4;
            6: pulse1_lengthCounter_LengthCounter <= 80;
            7: pulse1_lengthCounter_LengthCounter <= 6;
            8: pulse1_lengthCounter_LengthCounter <= 160;
            9: pulse1_lengthCounter_LengthCounter <= 8;
            10: pulse1_lengthCounter_LengthCounter <= 60;
            11: pulse1_lengthCounter_LengthCounter <= 10;
            12: pulse1_lengthCounter_LengthCounter <= 14;
            13: pulse1_lengthCounter_LengthCounter <= 12;
            14: pulse1_lengthCounter_LengthCounter <= 26;
            15: pulse1_lengthCounter_LengthCounter <= 14;
            16: pulse1_lengthCounter_LengthCounter <= 12;
            17: pulse1_lengthCounter_LengthCounter <= 16;
            18: pulse1_lengthCounter_LengthCounter <= 24;
            19: pulse1_lengthCounter_LengthCounter <= 18;
            20: pulse1_lengthCounter_LengthCounter <= 48;
            21: pulse1_lengthCounter_LengthCounter <= 20;
            22: pulse1_lengthCounter_LengthCounter <= 96;
            23: pulse1_lengthCounter_LengthCounter <= 22;
            24: pulse1_lengthCounter_LengthCounter <= 192;
            25: pulse1_lengthCounter_LengthCounter <= 24;
            26: pulse1_lengthCounter_LengthCounter <= 72;
            27: pulse1_lengthCounter_LengthCounter <= 26;
            28: pulse1_lengthCounter_LengthCounter <= 16;
            29: pulse1_lengthCounter_LengthCounter <= 28;
            30: pulse1_lengthCounter_LengthCounter <= 32;
            default: pulse1_lengthCounter_LengthCounter <= 30;
        endcase
    end
end



assign pulse1_LengthCounterGate = (pulse1_lengthCounter_LengthCounter > 0);

endmodule
