[[PICTURE OF THE NES COLOR PALETTE]]

Originally the PPU is a video chip that can generate an NTSC (PAL) signal. The PPU comes with it's own memory bus, 


For the sprite positioning data, the PPU contains a 256-Byte DRAM. There is no controller that refreshes it, it is just expected by the game the update it.
This is a clever design, since most games would want to update all sprites in each frame anyway. This way the Sprite RAM is refreshed every 1/60 ms, which
is within the range of the processes at the time.
The CPU has a DMA unit that can directly copy a 256-Byte Page to the PPU, by directly accessing the sprite address registers. This is much faster than
copying in software, as for each actual sprite memory access, 

In context of describing the PPU Internals, the sprite positioning memory is sometimes called OAM (Object Attribute Memory) in NESDev slang
, since

This simplified things for the game developer, as the game code could just manipulate a CPU Memory page with the sprite data, and quickly copy it in whole
during the VBlank Interrupt Handler. 
 something like DMA unit that can halt the 6502 and access accdoes write exactly 256 (pseudo-)DMA-Unit in th 
This DRAM requires memory refreshes, and it seems to be built into the memory access logic.

This can be verified as after power-cycling the machine, the Sprite RAM reads back values.[citation]
 

The framebuffer is stored as palette index values, so each pixel requires only 6 bits instead of 24 in case of 8-Bit RGB Output. 
. This saves valuable BlockRAM resources on the FPGA

Glossary

- VBlank
