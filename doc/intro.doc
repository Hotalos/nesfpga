Introductional Reading on the NES

This thesis aims to be a 

There are different sources of information stemming from the NES Emulating scene. Most information in this thesis come from reading floating .txt files, wiki pages,
forum entries and IRC gossip, which all are usually not considered for citation in an academic context.
This thesis tries to put some of these information in my own words, which aims to simplify things from a electronic engineering perspective, and build a fun project
that can be used to teach Hardware Design. Another goal is to provide a general overview about the NES System, as it has been written by many before.

The appendix contains a few should also considered be part 

the nes community

what it means to gather information from old .txt files, irc channels and forum/wiki consensus.

Differences in terminology to electrical engineering. 



 „When was the last time you spent a pleasant evening in a comfortable chair, reading a good program?" - Donald Knuth

Few languages are further away from this literate programming 

meta-programming / vhdl frontend
80s style language, new language design have it hard because of proprietary vendor tools.
the quality of the tools that are provided by the big fpga vendors are abysmal quality. 
open source approach, opening inhibited by patents and intellectual property bullshit thinking
fpga have failed the diy dream of software-solderable hardware. instead, xilinx delievers a world of pain.
allthough the myhdl approach is not comparable in performance to commercial tools, it can radically simplify testing
when working in a modern, elegant script language like python.

MyHDL provides a way to describe a hardware simulation in python. this is a huge step from an 80s language like VHDL,
since programming experience can naturally be used to debug hardware, and simplify .

this work takes a hybrid approach, as i discovered myhdl after most of the work was complete, and used it only for newer modules,
like the apu and the onscreen debugger. were written in myhdl, while t

because the current state of afairs with FPGAs leave no other choice than working in establishment languages like
VHDL or Verilog, because the proprietary synthesizer tools provide nothing else.


it might even be possible to write a netlist backend.


!!!xilinx is evil.!!!

The ISE® software includes Xilinx® Synthesis Technology (XST), which synthesizes VHDL, Verilog, or mixed language designs to create Xilinx-specific netlist files known as NGC files. Unlike output from other vendors, which consists of an EDIF file with an associated NCF file, NGC files contain both logical design data and constraints. XST places the NGC file in your project directory and the file is accepted as input to the Translate (NGDBuild) step of the Implement Design process. To specify XST as your synthesis tool, you must set the Synthesis Tool Project Property to XST, as described in Changing Project, Source, and Snapshot Properties.
^
| 
This is just some shit example of how xilinx inverts the idea of openness, and building always more self-invented bullshit that is most hardly to interact with,
They do not want anyone to mess with their business, and actively try to inhibit third party contribution and knowledge about their technology, while delievering
hideous ugly stupid tools that clearly shows that more development, and a place for new thoughts is required.
//try to isolate the development of their synthesis tools from the rest of the world.
//this is underlined with "intellectual property" bullshit.
